#pragma once
extern bool PRBSS_824, PRBSS_825, PRBSS_824, PVkCSOKPLy1, PVkCSOKPLy2, PVkCSOKPLy3, PVkCSOKPLy4, PVkCSOKPLy5, PVkCSOKPLy6, PVkCSOKLLy7,
PCSOKPL, PKLPL, PCSOZHPL,
//Yellow
PVkCSOZHPLx1, PVkCSOZHPLx2, PVkCSOZHPLx3, PVkCSOZHPLx4, PVkCSOZHPLx5, PVkCSOZHPLx6
, PVkCSOZHPLx7, PVkCSOZHPLx8, PVkCSOZHPLx9, PVkCSOZHPLx10, PVkCSOZHPLx11, PVkCSOZHPLx12, PVkCSOZHPLx13, PVkCSOZHPLx14, PVkCSOZHPLx15,
PVkCSOZHPLx16, PVkCSOZHPLx17, PVkCSOZHPLx18, PVkCSOZHPLx19, PVkCSOZHPLx20, PVkCSOZHPLx21, PVkCSOZHPLx22, PVkCSOZHLLx23, PVkCSOZHLLx24
, PVkCSOZHLLx25, PVkCSOZHLLx26,

PVkCSOZHPLy1, PVkCSOZHPLy2, PVkCSOZHPLy3, PVkCSOZHPLy4, PVkCSOZHPLy5, PVkCSOZHPLy6, PVkCSOZHPLy7, PVkCSOZHLLy8,



BSS811x1, BSS811x2, BSS811y1, BSS811y2, BSS811z1, BSS811z2, BSS824X1D, BSS824X1J, BSS824X1M,
BSS824X1N, BSS824X1T, BSS824X1b, BSS824X1h, BSS824X1j, BSS824X1A, BSS824X1n, BSS824X1p, BSS824X1r, BSS824X1t,
BSS824X1v, BSS824X1x, BSS824X1z, BSS824X1BB, BSS824X1DD, BSS824X1FF, BSS824X1HH, BSS824X1f, BSS824X3L, SUR_GS1_OTKL, SUR_GS2_OTKL,
SUR_GS3_OTKL, SUR_GS4_OTKL, BSS824X2B, BSS824X2E, BSS824X2F, BSS824X2G, BSS824X2J, BSS824X2N, BSS824X2R, BSS824X2S, BSS824X2T, BSS824X2A,
BSS824X2U, BSS824X2V, BSS824X2W, BSS824X2X, BSS824X2Y, BSS824X2Z, BSS824X2a, BSS824X2b, BSS824X2c, BSS824X2d, BSS824X2e, BSS824X2n, BSS811X2d
, BSS811X2e, BSS811X2f, BSS811X2g, BSS825X5A, BSS825X5C, BSS825X5E, BSS825X5G, kren_velik_PL, P_BAKOV_VELIKO, alpha_pu_gamma_ogranich_PL, RAZREZH_VELIKO,
BSS825X6A, BSS825X5C, BSS825X6C, BSS825X6D, BSS825X6m, BSS825X6n, BSS825X6r, BSS812X6p,


//Red
BSS824X1G, BSS824X2D, BSS824X1X, BSS824X2L, BSS824X1Z, BSS824X2M, BSS824X1d, BSS824X2P, BSS824X3G, BSS824X2k, BSS824X3J, BSS824X2m, BSS811X1BB,
BSS811X2b, BSS825X6F, BSS825X6R, BSS825X6G, BSS825X6S, BSS825X6H, PVkCSOKPLm1, PVkCSOKPLm2, PVkCSOKPLm3, PVkCSOKPLm4, PVkCSOKPLm5, PVkCSOKPLm6,
PVkCSOKPLm7, PVkCSOKPLm8, PVkCSOKPLm9, PVkCSOKPLm10, PVkCSOKPLm11,


BSS825X5j,BSS825X5T, BSS825X5n, V_VELIKA, V_MALA, alpha_pu_predel,

BSS825X6T, BSS825X6J, BSS825X6U, BSS825X6l, BSS825X6j, BSS825X6k,


BSS825X5L, BSS825X5f, BSS825X5N, BSS825X5h, BSS825X5R,
//Green and white
BSS824X1R, BSS824X1E, BSS824X1KK, BSS824X3A, BSS824X3T, BSS824X3N, BSS824X2H, BSS824X2C, BSS824X2f, BSS824X2h, BSS824X2r, BSS824X2p,
PREDKRL_VIPUSH, BSS825X5V, BSS825X5FF, BSS825X5HH, BSS825X5X, BSS825X5Z, BSS825X5b, BSS825X5d, BSS825X5r, BSS825X5t, BSS825X7R, BSS825X5v, BSS825X5x,
BSS825X5z, BSS825X5BB, BSS825XDD, BSS812X5x, BSS825X5KK, BSS825X5MM, BSS825X5_1, BSS812X5FF, VKL_rezervtormoza, VKL_forsirtormoza,
BSS825X6E, BSS825X6K, BSS825X6d, BSS825X6e, BSS825X6L, BSS825X6M, BSS825X6N, BSS825X6P, BSS825X6W, BSS825X6X, BSS825X6q, BSS825X6Y,
BSS825X6Z, BSS825X6a, BSS825X6Y, BSS825X6a, BSS825X6f, BSS825X6g, BSS825X6_1, BSS811X6d, BSS811X6p, BSS811X6r, BSS811X6f, BSS812X5KK,


BSS824X3R, BSS824X2q, BSS824X3E, BSS824X2i;

extern double Ush1dpl, Ush2dpl, Ush1dpp, Ush2dpp, USASPL;
extern int S2_03364, alpha_rrya7pl, S6_03364, PVkCSOZHPLx_sum, PVkCSOKPLy_sum, PVkCSOZHPLy_sum, PVkCSOKPLm_sum;

void logic();

double USASL_to_alpha(double alpha)
{
	double result;
	result = (0.25 * alpha) + 0.75;
	return result;
}






