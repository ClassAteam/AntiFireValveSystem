#pragma once
extern bool PRBSS_824, PRBSS_825, PRBSS_824, PVkCSOKPLy1, PVkCSOKPLy2, PVkCSOKPLy3, PVkCSOKPLy4, PVkCSOKPLy5, PVkCSOKPLy6, PVkCSOKLLy7,
PCSOKPL, PKLPL, PCSOZHPL,
//Yellow
PVkCSOZHPLx1, PVkCSOZHPLx2, PVkCSOZHPLx3, PVkCSOZHPLx4, PVkCSOZHPLx5, PVkCSOZHPLx6
, PVkCSOZHPLx7, PVkCSOZHPLx8, PVkCSOZHPLx9, PVkCSOZHPLx10, PVkCSOZHPLx11, PVkCSOZHPLx12, PVkCSOZHPLx13, PVkCSOZHPLx14, PVkCSOZHPLx15,
PVkCSOZHPLx16, PVkCSOZHPLx17, PVkCSOZHPLx18, PVkCSOZHPLx19, PVkCSOZHPLx20, PVkCSOZHPLx21, PVkCSOZHPLx22, PVkCSOZHLLx23, PVkCSOZHLLx24
, PVkCSOZHLLx25, PVkCSOZHLLx26,

PVkCSOZHLLy1, PVkCSOZHLLy2, PVkCSOZHLLy3, PVkCSOZHLLy4, PVkCSOZHLLy5, PVkCSOZHLLy6, PVkCSOZHLLy7, PVkCSOZHLLy8,

PVkCSOZHLLk1, PVkCSOZHLLk2, PVkCSOZHLLk3, PVkCSOZHLLk4, PVkCSOZHLLk5, PVkCSOZHLLk6, PVkCSOZHLLk7, PVkCSOZHLLk8, PVkCSOZHLLk9, PVkCSOZHLLk10,
PVkCSOZHLLk11, PVkCSOZHLLk12, PVkCSOZHLLk13, PVkCSOZHLLk14, PVkCSOZHLLk15, PVkCSOZHLLk16, PVkCSOZHLLk17, PVkCSOZHLLk18, PVkCSOZHLLk19, PVkCSOZHLLk20,
PVkCSOZHLLk21, PVkCSOZHLLk22, PVkCSOZHLLk23, PVkCSOZHLLk24, PVkCSOZHLLk25, PVkCSOZHLLk26,

BSS811x1, BSS811x2, BSS811y1, BSS811y2, BSS811z1, BSS811z2, BSS824X1D, BSS824X1J, BSS824X1M,
BSS824X1N, BSS824X1T, BSS824X1b, BSS824X1h, BSS824X1j, BSS824X1A, BSS824X1n, BSS824X1p, BSS824X1r, BSS824X1t,
BSS824X1v, BSS824X1x, BSS824X1z, BSS824X1BB, BSS824X1DD, BSS824X1FF, BSS824X1HH, BSS824X1f, BSS824X3L, SUR_GS1_OTKL, SUR_GS2_OTKL,
SUR_GS3_OTKL, SUR_GS4_OTKL, BSS824X2B, BSS824X2E, BSS824X2F, BSS824X2G, BSS824X2J, BSS824X2N, BSS824X2R, BSS824X2S, BSS824X2T, BSS824X2A,
BSS824X2U, BSS824X2V, BSS824X2W, BSS824X2X, BSS824X2Y, BSS824X2Z, BSS824X2a, BSS824X2b, BSS824X2c, BSS824X2d, BSS824X2e, BSS824X2n, BSS811X2d
, BSS811X2e, BSS811X2f, BSS811X2g, BSS812X5j, BSS812X5p, BSS812X5HH, KREN_VELIK, SVS_OTKAZ, INS_OTKAZ, alpha_pu_gamma_ogranich, NAZHMI_Rezervtormoza,
BSS812X6T, BSS812X6V, BSS812X6e, BSS812X6j, BSS812X6k, BSS812X6m, BSS812X6q, BSS812X6n,

BSS913X1C, BSS913X1E, BSS913X1G, BSS913X1J, BSS913X1L, BSS913X1N, BSS913X1T, BSS913X1V, BSS913X1X, BSS913X1Z, BSS913X1b, BSS913X1d, BSS913X1h, BSS913X1j,
BSS913X1n, BSS913X1p, BSS913X1r, BSS913X1t, BSS913X1x, BSS913X1z, BSS913X1BB, BSS913X1DD, BSS913X1FF, BSS913X1HH, BSS913X3E, BSS913X3G,

BSS913X2B, BSS913X2C, BSS913X2D, BSS913X2E, BSS913X2F, BSS913X2G, BSS913X2J, BSS913X2K, BSS913X2L, BSS913X2M, BSS913X2N, BSS913X2P, BSS913X2S, BSS913X2T,
BSS913X2U, BSS913X2V, BSS913X2W, BSS913X2X, BSS913X2Z, BSS913X2a, BSS913X2b, BSS913X2c, BSS913X2d, BSS913X2e, BSS913X2j, BSS913X2k,
//Red
BSS824X1G, BSS824X2D, BSS824X1X, BSS824X2L, BSS824X1Z, BSS824X2M, BSS824X1d, BSS824X2P, BSS824X3G, BSS824X2k, BSS824X3J, BSS824X2m, BSS811X1BB,
BSS811X2b, BSS812X6S, BSS812X6U, BSS812X6g, BSS812X6h, BSS812X6i, PVkCSOKLLm1, PVkCSOKLLm2, PVkCSOKLLm3, PVkCSOKLLm4, PVkCSOKLLm5,

BSS913X1A, BSS913X1R, BSS913X1f, BSS913X1v,

BSS913X2A, BSS913X2H, BSS913X2R, BSS913X2Y,

PVkCSOKLLp1, PVkCSOKLLp2, PVkCSOKLLp3, PVkCSOKLLp4,


BSS812X5h, BSS812X5n, V_velika, V_mala, alpha_pu_predel,
//Green and white
BSS824X1R, BSS824X1E, BSS824X1KK, BSS824X3A, BSS824X3T, BSS824X3N, BSS824X2H, BSS824X2C, BSS824X2f, BSS824X2h, BSS824X2r, BSS824X2p,
BSS812X5B, BSS812X5D, BSS812X5E, BSS812X5G, BSS812X5J, BSS812X5L, BSS812X5N, BSS812X5R, BSS812X5T, BSS812X5V, BSS812X5X, BSS812X5Z, BSS812X5d,
BSS812X5t, BSS812X5r, BSS812X5x, BSS812X5z, BSS812X5BB, BSS812X5DD, BSS812X5FF, VKL_rezervtormoza, VKL_forsirtormoza,
BSS811X6A, BSS811X6B, BSS811X6C, BSS811X6D, BSS811X6E, BSS811X6F, BSS811X6G, BSS811X6H, BSS811X6J, BSS811X6K, BSS811X6L, BSS811X6M,
BSS811X6N, BSS811X6X, BSS811X6W, BSS811X6Y, BSS811X6a, BSS811X6b, BSS811X6c, BSS811X6d, BSS811X6p, BSS811X6r, BSS811X6f, BSS812X5KK,

BSS913X3A, BSS913X3C, BSS913X3J, BSS913X3L, BSS913X3N,

BSS913X2h, BSS913X2i, BSS913X2m, BSS913X2n, BSS913X2p,

BSS824X3R, BSS824X2q, BSS824X3E, BSS824X2i;

extern double Ush1dpl, Ush2dpl, Ush1dpp, Ush2dpp, USASPL;
extern int S2_03364, alpha_rrya7pl, S6_03364, PVkCSOZHPLx_sum, PVkCSOKPLy_sum, PVkCSOZHLLy_sum, PVkCSOKLLm_sum, PVkCSOZHLLk_sum, PVkCSOKLLp_sum;

void logic();

double USASL_to_alpha(double alpha)
{
	double result;
	result = (0.25 * alpha) + 0.75;
	return result;
}






